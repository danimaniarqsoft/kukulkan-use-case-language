/**
 * generated by Xtext 2.16.0
 */
package mx.kukulkan.dsl.usecase.useCase.impl;

import java.util.Collection;

import mx.kukulkan.dsl.usecase.useCase.Actor;
import mx.kukulkan.dsl.usecase.useCase.Concept;
import mx.kukulkan.dsl.usecase.useCase.UseCase;
import mx.kukulkan.dsl.usecase.useCase.UseCaseFlow;
import mx.kukulkan.dsl.usecase.useCase.UseCasePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Use Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.UseCaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.UseCaseImpl#getUseCaseName <em>Use Case Name</em>}</li>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.UseCaseImpl#getActors <em>Actors</em>}</li>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.UseCaseImpl#getConcepts <em>Concepts</em>}</li>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.UseCaseImpl#getUseCasesFlow <em>Use Cases Flow</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UseCaseImpl extends MinimalEObjectImpl.Container implements UseCase
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getUseCaseName() <em>Use Case Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCaseName()
   * @generated
   * @ordered
   */
  protected static final String USE_CASE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUseCaseName() <em>Use Case Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCaseName()
   * @generated
   * @ordered
   */
  protected String useCaseName = USE_CASE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getActors() <em>Actors</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActors()
   * @generated
   * @ordered
   */
  protected EList<Actor> actors;

  /**
   * The cached value of the '{@link #getConcepts() <em>Concepts</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcepts()
   * @generated
   * @ordered
   */
  protected EList<Concept> concepts;

  /**
   * The cached value of the '{@link #getUseCasesFlow() <em>Use Cases Flow</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCasesFlow()
   * @generated
   * @ordered
   */
  protected EList<UseCaseFlow> useCasesFlow;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UseCasePackage.Literals.USE_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCasePackage.USE_CASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUseCaseName()
  {
    return useCaseName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUseCaseName(String newUseCaseName)
  {
    String oldUseCaseName = useCaseName;
    useCaseName = newUseCaseName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCasePackage.USE_CASE__USE_CASE_NAME, oldUseCaseName, useCaseName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Actor> getActors()
  {
    if (actors == null)
    {
      actors = new EObjectResolvingEList<Actor>(Actor.class, this, UseCasePackage.USE_CASE__ACTORS);
    }
    return actors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Concept> getConcepts()
  {
    if (concepts == null)
    {
      concepts = new EObjectResolvingEList<Concept>(Concept.class, this, UseCasePackage.USE_CASE__CONCEPTS);
    }
    return concepts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<UseCaseFlow> getUseCasesFlow()
  {
    if (useCasesFlow == null)
    {
      useCasesFlow = new EObjectContainmentEList<UseCaseFlow>(UseCaseFlow.class, this, UseCasePackage.USE_CASE__USE_CASES_FLOW);
    }
    return useCasesFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__USE_CASES_FLOW:
        return ((InternalEList<?>)getUseCasesFlow()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        return getName();
      case UseCasePackage.USE_CASE__USE_CASE_NAME:
        return getUseCaseName();
      case UseCasePackage.USE_CASE__ACTORS:
        return getActors();
      case UseCasePackage.USE_CASE__CONCEPTS:
        return getConcepts();
      case UseCasePackage.USE_CASE__USE_CASES_FLOW:
        return getUseCasesFlow();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        setName((String)newValue);
        return;
      case UseCasePackage.USE_CASE__USE_CASE_NAME:
        setUseCaseName((String)newValue);
        return;
      case UseCasePackage.USE_CASE__ACTORS:
        getActors().clear();
        getActors().addAll((Collection<? extends Actor>)newValue);
        return;
      case UseCasePackage.USE_CASE__CONCEPTS:
        getConcepts().clear();
        getConcepts().addAll((Collection<? extends Concept>)newValue);
        return;
      case UseCasePackage.USE_CASE__USE_CASES_FLOW:
        getUseCasesFlow().clear();
        getUseCasesFlow().addAll((Collection<? extends UseCaseFlow>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UseCasePackage.USE_CASE__USE_CASE_NAME:
        setUseCaseName(USE_CASE_NAME_EDEFAULT);
        return;
      case UseCasePackage.USE_CASE__ACTORS:
        getActors().clear();
        return;
      case UseCasePackage.USE_CASE__CONCEPTS:
        getConcepts().clear();
        return;
      case UseCasePackage.USE_CASE__USE_CASES_FLOW:
        getUseCasesFlow().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UseCasePackage.USE_CASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UseCasePackage.USE_CASE__USE_CASE_NAME:
        return USE_CASE_NAME_EDEFAULT == null ? useCaseName != null : !USE_CASE_NAME_EDEFAULT.equals(useCaseName);
      case UseCasePackage.USE_CASE__ACTORS:
        return actors != null && !actors.isEmpty();
      case UseCasePackage.USE_CASE__CONCEPTS:
        return concepts != null && !concepts.isEmpty();
      case UseCasePackage.USE_CASE__USE_CASES_FLOW:
        return useCasesFlow != null && !useCasesFlow.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", useCaseName: ");
    result.append(useCaseName);
    result.append(')');
    return result.toString();
  }

} //UseCaseImpl
