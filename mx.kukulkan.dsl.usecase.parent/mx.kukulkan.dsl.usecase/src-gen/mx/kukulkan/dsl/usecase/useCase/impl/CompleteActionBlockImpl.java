/**
 * generated by Xtext 2.16.0
 */
package mx.kukulkan.dsl.usecase.useCase.impl;

import java.util.Collection;

import mx.kukulkan.dsl.usecase.useCase.CompleteActionBlock;
import mx.kukulkan.dsl.usecase.useCase.SystemActionBlock;
import mx.kukulkan.dsl.usecase.useCase.UseCasePackage;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Complete Action Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.CompleteActionBlockImpl#getUserActionsBlock <em>User Actions Block</em>}</li>
 *   <li>{@link mx.kukulkan.dsl.usecase.useCase.impl.CompleteActionBlockImpl#getSystemActionsBlock <em>System Actions Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CompleteActionBlockImpl extends MinimalEObjectImpl.Container implements CompleteActionBlock
{
  /**
   * The cached value of the '{@link #getUserActionsBlock() <em>User Actions Block</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUserActionsBlock()
   * @generated
   * @ordered
   */
  protected EList<String> userActionsBlock;

  /**
   * The cached value of the '{@link #getSystemActionsBlock() <em>System Actions Block</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystemActionsBlock()
   * @generated
   * @ordered
   */
  protected EList<SystemActionBlock> systemActionsBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CompleteActionBlockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UseCasePackage.Literals.COMPLETE_ACTION_BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getUserActionsBlock()
  {
    if (userActionsBlock == null)
    {
      userActionsBlock = new EDataTypeEList<String>(String.class, this, UseCasePackage.COMPLETE_ACTION_BLOCK__USER_ACTIONS_BLOCK);
    }
    return userActionsBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SystemActionBlock> getSystemActionsBlock()
  {
    if (systemActionsBlock == null)
    {
      systemActionsBlock = new EObjectContainmentEList<SystemActionBlock>(SystemActionBlock.class, this, UseCasePackage.COMPLETE_ACTION_BLOCK__SYSTEM_ACTIONS_BLOCK);
    }
    return systemActionsBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UseCasePackage.COMPLETE_ACTION_BLOCK__SYSTEM_ACTIONS_BLOCK:
        return ((InternalEList<?>)getSystemActionsBlock()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UseCasePackage.COMPLETE_ACTION_BLOCK__USER_ACTIONS_BLOCK:
        return getUserActionsBlock();
      case UseCasePackage.COMPLETE_ACTION_BLOCK__SYSTEM_ACTIONS_BLOCK:
        return getSystemActionsBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UseCasePackage.COMPLETE_ACTION_BLOCK__USER_ACTIONS_BLOCK:
        getUserActionsBlock().clear();
        getUserActionsBlock().addAll((Collection<? extends String>)newValue);
        return;
      case UseCasePackage.COMPLETE_ACTION_BLOCK__SYSTEM_ACTIONS_BLOCK:
        getSystemActionsBlock().clear();
        getSystemActionsBlock().addAll((Collection<? extends SystemActionBlock>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UseCasePackage.COMPLETE_ACTION_BLOCK__USER_ACTIONS_BLOCK:
        getUserActionsBlock().clear();
        return;
      case UseCasePackage.COMPLETE_ACTION_BLOCK__SYSTEM_ACTIONS_BLOCK:
        getSystemActionsBlock().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UseCasePackage.COMPLETE_ACTION_BLOCK__USER_ACTIONS_BLOCK:
        return userActionsBlock != null && !userActionsBlock.isEmpty();
      case UseCasePackage.COMPLETE_ACTION_BLOCK__SYSTEM_ACTIONS_BLOCK:
        return systemActionsBlock != null && !systemActionsBlock.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (userActionsBlock: ");
    result.append(userActionsBlock);
    result.append(')');
    return result.toString();
  }

} //CompleteActionBlockImpl
