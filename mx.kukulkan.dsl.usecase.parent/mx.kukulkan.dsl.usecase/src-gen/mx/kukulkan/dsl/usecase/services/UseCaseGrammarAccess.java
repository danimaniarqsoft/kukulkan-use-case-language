/*
 * generated by Xtext 2.16.0
 */
package mx.kukulkan.dsl.usecase.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UseCaseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RequirementsUseCaseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.RequirementsUseCaseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActorsActorParserRuleCall_0_0 = (RuleCall)cActorsAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataConceptParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		private final Assignment cUsecasesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUsecasesUseCaseParserRuleCall_2_0 = (RuleCall)cUsecasesAssignment_2.eContents().get(0);
		
		//RequirementsUseCaseModel:
		//	actors+=Actor+
		//	data+=Concept*
		//	usecases+=UseCase+;
		@Override public ParserRule getRule() { return rule; }
		
		//actors+=Actor+ data+=Concept* usecases+=UseCase+
		public Group getGroup() { return cGroup; }
		
		//actors+=Actor+
		public Assignment getActorsAssignment_0() { return cActorsAssignment_0; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_0_0() { return cActorsActorParserRuleCall_0_0; }
		
		//data+=Concept*
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }
		
		//Concept
		public RuleCall getDataConceptParserRuleCall_1_0() { return cDataConceptParserRuleCall_1_0; }
		
		//usecases+=UseCase+
		public Assignment getUsecasesAssignment_2() { return cUsecasesAssignment_2; }
		
		//UseCase
		public RuleCall getUsecasesUseCaseParserRuleCall_2_0() { return cUsecasesUseCaseParserRuleCall_2_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Actor:
		//	"Actor:" name=ID description=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//"Actor:" name=ID description=STRING?
		public Group getGroup() { return cGroup; }
		
		//"Actor:"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConceptDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConceptDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cConceptDescriptionAssignment_2.eContents().get(0);
		
		//Concept:
		//	"DataConcept:" name=ID conceptDescription=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//"DataConcept:" name=ID conceptDescription=STRING?
		public Group getGroup() { return cGroup; }
		
		//"DataConcept:"
		public Keyword getDataConceptKeyword_0() { return cDataConceptKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//conceptDescription=STRING?
		public Assignment getConceptDescriptionAssignment_2() { return cConceptDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getConceptDescriptionSTRINGTerminalRuleCall_2_0() { return cConceptDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUseCaseNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUseCaseNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cUseCaseNameAssignment_2.eContents().get(0);
		private final Assignment cActorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActorsActorCrossReference_3_0 = (CrossReference)cActorsAssignment_3.eContents().get(0);
		private final RuleCall cActorsActorIDTerminalRuleCall_3_0_1 = (RuleCall)cActorsActorCrossReference_3_0.eContents().get(1);
		private final Assignment cConceptsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cConceptsConceptCrossReference_4_0 = (CrossReference)cConceptsAssignment_4.eContents().get(0);
		private final RuleCall cConceptsConceptIDTerminalRuleCall_4_0_1 = (RuleCall)cConceptsConceptCrossReference_4_0.eContents().get(1);
		private final Assignment cUseCasesFlowAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUseCasesFlowUseCaseFlowParserRuleCall_5_0 = (RuleCall)cUseCasesFlowAssignment_5.eContents().get(0);
		
		//UseCase:
		//	"UseCase:" name=ID useCaseName=STRING?
		//	actors+=[Actor]*
		//	concepts+=[Concept]*
		//	useCasesFlow+=UseCaseFlow*;
		@Override public ParserRule getRule() { return rule; }
		
		//"UseCase:" name=ID useCaseName=STRING? actors+=[Actor]* concepts+=[Concept]* useCasesFlow+=UseCaseFlow*
		public Group getGroup() { return cGroup; }
		
		//"UseCase:"
		public Keyword getUseCaseKeyword_0() { return cUseCaseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//useCaseName=STRING?
		public Assignment getUseCaseNameAssignment_2() { return cUseCaseNameAssignment_2; }
		
		//STRING
		public RuleCall getUseCaseNameSTRINGTerminalRuleCall_2_0() { return cUseCaseNameSTRINGTerminalRuleCall_2_0; }
		
		//actors+=[Actor]*
		public Assignment getActorsAssignment_3() { return cActorsAssignment_3; }
		
		//[Actor]
		public CrossReference getActorsActorCrossReference_3_0() { return cActorsActorCrossReference_3_0; }
		
		//ID
		public RuleCall getActorsActorIDTerminalRuleCall_3_0_1() { return cActorsActorIDTerminalRuleCall_3_0_1; }
		
		//concepts+=[Concept]*
		public Assignment getConceptsAssignment_4() { return cConceptsAssignment_4; }
		
		//[Concept]
		public CrossReference getConceptsConceptCrossReference_4_0() { return cConceptsConceptCrossReference_4_0; }
		
		//ID
		public RuleCall getConceptsConceptIDTerminalRuleCall_4_0_1() { return cConceptsConceptIDTerminalRuleCall_4_0_1; }
		
		//useCasesFlow+=UseCaseFlow*
		public Assignment getUseCasesFlowAssignment_5() { return cUseCasesFlowAssignment_5; }
		
		//UseCaseFlow
		public RuleCall getUseCasesFlowUseCaseFlowParserRuleCall_5_0() { return cUseCasesFlowUseCaseFlowParserRuleCall_5_0; }
	}
	public class UseCaseFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.UseCaseFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseCaseFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompleteActionsBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompleteActionsBlockCompleteActionBlockParserRuleCall_1_0 = (RuleCall)cCompleteActionsBlockAssignment_1.eContents().get(0);
		
		//UseCaseFlow:
		//	"UseCaseFlow:"
		//	completeActionsBlock+=CompleteActionBlock*;
		@Override public ParserRule getRule() { return rule; }
		
		//"UseCaseFlow:" completeActionsBlock+=CompleteActionBlock*
		public Group getGroup() { return cGroup; }
		
		//"UseCaseFlow:"
		public Keyword getUseCaseFlowKeyword_0() { return cUseCaseFlowKeyword_0; }
		
		//completeActionsBlock+=CompleteActionBlock*
		public Assignment getCompleteActionsBlockAssignment_1() { return cCompleteActionsBlockAssignment_1; }
		
		//CompleteActionBlock
		public RuleCall getCompleteActionsBlockCompleteActionBlockParserRuleCall_1_0() { return cCompleteActionsBlockCompleteActionBlockParserRuleCall_1_0; }
	}
	public class CompleteActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.CompleteActionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompleteActionBlockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUserActionsBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUserActionsBlockUserActionBlockParserRuleCall_1_0 = (RuleCall)cUserActionsBlockAssignment_1.eContents().get(0);
		private final Assignment cSystemActionsBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemActionsBlockSystemActionBlockParserRuleCall_2_0 = (RuleCall)cSystemActionsBlockAssignment_2.eContents().get(0);
		
		//CompleteActionBlock:
		//	"CompleteActionBlock:"
		//	userActionsBlock+=UserActionBlock*
		//	systemActionsBlock+=SystemActionBlock*;
		@Override public ParserRule getRule() { return rule; }
		
		//"CompleteActionBlock:" userActionsBlock+=UserActionBlock* systemActionsBlock+=SystemActionBlock*
		public Group getGroup() { return cGroup; }
		
		//"CompleteActionBlock:"
		public Keyword getCompleteActionBlockKeyword_0() { return cCompleteActionBlockKeyword_0; }
		
		//userActionsBlock+=UserActionBlock*
		public Assignment getUserActionsBlockAssignment_1() { return cUserActionsBlockAssignment_1; }
		
		//UserActionBlock
		public RuleCall getUserActionsBlockUserActionBlockParserRuleCall_1_0() { return cUserActionsBlockUserActionBlockParserRuleCall_1_0; }
		
		//systemActionsBlock+=SystemActionBlock*
		public Assignment getSystemActionsBlockAssignment_2() { return cSystemActionsBlockAssignment_2; }
		
		//SystemActionBlock
		public RuleCall getSystemActionsBlockSystemActionBlockParserRuleCall_2_0() { return cSystemActionsBlockSystemActionBlockParserRuleCall_2_0; }
	}
	public class UserActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.UserActionBlock");
		private final Keyword cUserActionBlockKeyword = (Keyword)rule.eContents().get(1);
		
		//UserActionBlock:
		//	"UserActionBlock";
		@Override public ParserRule getRule() { return rule; }
		
		//"UserActionBlock"
		public Keyword getUserActionBlockKeyword() { return cUserActionBlockKeyword; }
	}
	public class SystemActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mx.kukulkan.dsl.usecase.UseCase.SystemActionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemActionBlockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SystemActionBlock:
		//	"SystemActionBlock:" name=ID description=STRING?;
		@Override public ParserRule getRule() { return rule; }
		
		//"SystemActionBlock:" name=ID description=STRING?
		public Group getGroup() { return cGroup; }
		
		//"SystemActionBlock:"
		public Keyword getSystemActionBlockKeyword_0() { return cSystemActionBlockKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final RequirementsUseCaseModelElements pRequirementsUseCaseModel;
	private final ActorElements pActor;
	private final ConceptElements pConcept;
	private final UseCaseElements pUseCase;
	private final UseCaseFlowElements pUseCaseFlow;
	private final CompleteActionBlockElements pCompleteActionBlock;
	private final UserActionBlockElements pUserActionBlock;
	private final SystemActionBlockElements pSystemActionBlock;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRequirementsUseCaseModel = new RequirementsUseCaseModelElements();
		this.pActor = new ActorElements();
		this.pConcept = new ConceptElements();
		this.pUseCase = new UseCaseElements();
		this.pUseCaseFlow = new UseCaseFlowElements();
		this.pCompleteActionBlock = new CompleteActionBlockElements();
		this.pUserActionBlock = new UserActionBlockElements();
		this.pSystemActionBlock = new SystemActionBlockElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mx.kukulkan.dsl.usecase.UseCase".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RequirementsUseCaseModel:
	//	actors+=Actor+
	//	data+=Concept*
	//	usecases+=UseCase+;
	public RequirementsUseCaseModelElements getRequirementsUseCaseModelAccess() {
		return pRequirementsUseCaseModel;
	}
	
	public ParserRule getRequirementsUseCaseModelRule() {
		return getRequirementsUseCaseModelAccess().getRule();
	}
	
	//Actor:
	//	"Actor:" name=ID description=STRING?;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Concept:
	//	"DataConcept:" name=ID conceptDescription=STRING?;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//UseCase:
	//	"UseCase:" name=ID useCaseName=STRING?
	//	actors+=[Actor]*
	//	concepts+=[Concept]*
	//	useCasesFlow+=UseCaseFlow*;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//UseCaseFlow:
	//	"UseCaseFlow:"
	//	completeActionsBlock+=CompleteActionBlock*;
	public UseCaseFlowElements getUseCaseFlowAccess() {
		return pUseCaseFlow;
	}
	
	public ParserRule getUseCaseFlowRule() {
		return getUseCaseFlowAccess().getRule();
	}
	
	//CompleteActionBlock:
	//	"CompleteActionBlock:"
	//	userActionsBlock+=UserActionBlock*
	//	systemActionsBlock+=SystemActionBlock*;
	public CompleteActionBlockElements getCompleteActionBlockAccess() {
		return pCompleteActionBlock;
	}
	
	public ParserRule getCompleteActionBlockRule() {
		return getCompleteActionBlockAccess().getRule();
	}
	
	//UserActionBlock:
	//	"UserActionBlock";
	public UserActionBlockElements getUserActionBlockAccess() {
		return pUserActionBlock;
	}
	
	public ParserRule getUserActionBlockRule() {
		return getUserActionBlockAccess().getRule();
	}
	
	//SystemActionBlock:
	//	"SystemActionBlock:" name=ID description=STRING?;
	public SystemActionBlockElements getSystemActionBlockAccess() {
		return pSystemActionBlock;
	}
	
	public ParserRule getSystemActionBlockRule() {
		return getSystemActionBlockAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
