/*
 * generated by Xtext 2.16.0
 */
package mx.kukulkan.dsl.usecase.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mx.kukulkan.dsl.usecase.services.UseCaseGrammarAccess;
import mx.kukulkan.dsl.usecase.useCase.Actor;
import mx.kukulkan.dsl.usecase.useCase.CompleteActionBlock;
import mx.kukulkan.dsl.usecase.useCase.Concept;
import mx.kukulkan.dsl.usecase.useCase.RequirementsUseCaseModel;
import mx.kukulkan.dsl.usecase.useCase.SystemActionBlock;
import mx.kukulkan.dsl.usecase.useCase.UseCase;
import mx.kukulkan.dsl.usecase.useCase.UseCaseFlow;
import mx.kukulkan.dsl.usecase.useCase.UseCasePackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class UseCaseSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UseCaseGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UseCasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UseCasePackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case UseCasePackage.COMPLETE_ACTION_BLOCK:
				sequence_CompleteActionBlock(context, (CompleteActionBlock) semanticObject); 
				return; 
			case UseCasePackage.CONCEPT:
				sequence_Concept(context, (Concept) semanticObject); 
				return; 
			case UseCasePackage.REQUIREMENTS_USE_CASE_MODEL:
				sequence_RequirementsUseCaseModel(context, (RequirementsUseCaseModel) semanticObject); 
				return; 
			case UseCasePackage.SYSTEM_ACTION_BLOCK:
				sequence_SystemActionBlock(context, (SystemActionBlock) semanticObject); 
				return; 
			case UseCasePackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			case UseCasePackage.USE_CASE_FLOW:
				sequence_UseCaseFlow(context, (UseCaseFlow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Actor returns Actor
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_Actor(ISerializationContext context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompleteActionBlock returns CompleteActionBlock
	 *
	 * Constraint:
	 *     ((userActionsBlock+=UserActionBlock+ systemActionsBlock+=SystemActionBlock+) | systemActionsBlock+=SystemActionBlock+)?
	 */
	protected void sequence_CompleteActionBlock(ISerializationContext context, CompleteActionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Concept returns Concept
	 *
	 * Constraint:
	 *     (name=ID conceptDescription=STRING?)
	 */
	protected void sequence_Concept(ISerializationContext context, Concept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementsUseCaseModel returns RequirementsUseCaseModel
	 *
	 * Constraint:
	 *     (actors+=Actor+ data+=Concept* usecases+=UseCase+)
	 */
	protected void sequence_RequirementsUseCaseModel(ISerializationContext context, RequirementsUseCaseModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemActionBlock returns SystemActionBlock
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_SystemActionBlock(ISerializationContext context, SystemActionBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UseCaseFlow returns UseCaseFlow
	 *
	 * Constraint:
	 *     completeActionsBlock+=CompleteActionBlock+
	 */
	protected void sequence_UseCaseFlow(ISerializationContext context, UseCaseFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     (name=ID useCaseName=STRING? actors+=[Actor|ID]* concepts+=[Concept|ID]* useCasesFlow+=UseCaseFlow*)
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
