/*
 * generated by Xtext 2.16.0
 */
grammar InternalUseCase;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mx.kukulkan.dsl.usecase.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mx.kukulkan.dsl.usecase.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mx.kukulkan.dsl.usecase.services.UseCaseGrammarAccess;

}

@parser::members {

 	private UseCaseGrammarAccess grammarAccess;

    public InternalUseCaseParser(TokenStream input, UseCaseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RequirementsUseCaseModel";
   	}

   	@Override
   	protected UseCaseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRequirementsUseCaseModel
entryRuleRequirementsUseCaseModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementsUseCaseModelRule()); }
	iv_ruleRequirementsUseCaseModel=ruleRequirementsUseCaseModel
	{ $current=$iv_ruleRequirementsUseCaseModel.current; }
	EOF;

// Rule RequirementsUseCaseModel
ruleRequirementsUseCaseModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementsUseCaseModelAccess().getActorsActorParserRuleCall_0_0());
				}
				lv_actors_0_0=ruleActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementsUseCaseModelRule());
					}
					add(
						$current,
						"actors",
						lv_actors_0_0,
						"mx.kukulkan.dsl.usecase.UseCase.Actor");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementsUseCaseModelAccess().getDataConceptParserRuleCall_1_0());
				}
				lv_data_1_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementsUseCaseModelRule());
					}
					add(
						$current,
						"data",
						lv_data_1_0,
						"mx.kukulkan.dsl.usecase.UseCase.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementsUseCaseModelAccess().getUsecasesUseCaseParserRuleCall_2_0());
				}
				lv_usecases_2_0=ruleUseCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementsUseCaseModelRule());
					}
					add(
						$current,
						"usecases",
						lv_usecases_2_0,
						"mx.kukulkan.dsl.usecase.UseCase.UseCase");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	iv_ruleActor=ruleActor
	{ $current=$iv_ruleActor.current; }
	EOF;

// Rule Actor
ruleActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Actor:'
		{
			newLeafNode(otherlv_0, grammarAccess.getActorAccess().getActorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getActorAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActorRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	iv_ruleConcept=ruleConcept
	{ $current=$iv_ruleConcept.current; }
	EOF;

// Rule Concept
ruleConcept returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='DataConcept:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConceptAccess().getDataConceptKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_conceptDescription_2_0=RULE_STRING
				{
					newLeafNode(lv_conceptDescription_2_0, grammarAccess.getConceptAccess().getConceptDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptRule());
					}
					setWithLastConsumed(
						$current,
						"conceptDescription",
						lv_conceptDescription_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleUseCase
entryRuleUseCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCaseRule()); }
	iv_ruleUseCase=ruleUseCase
	{ $current=$iv_ruleUseCase.current; }
	EOF;

// Rule UseCase
ruleUseCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UseCase:'
		{
			newLeafNode(otherlv_0, grammarAccess.getUseCaseAccess().getUseCaseKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_useCaseName_2_0=RULE_STRING
				{
					newLeafNode(lv_useCaseName_2_0, grammarAccess.getUseCaseAccess().getUseCaseNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed(
						$current,
						"useCaseName",
						lv_useCaseName_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getUseCaseAccess().getActorsActorCrossReference_3_0());
				}
			)
		)*
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getUseCaseAccess().getConceptsConceptCrossReference_4_0());
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getUseCasesFlowUseCaseFlowParserRuleCall_5_0());
				}
				lv_useCasesFlow_5_0=ruleUseCaseFlow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"useCasesFlow",
						lv_useCasesFlow_5_0,
						"mx.kukulkan.dsl.usecase.UseCase.UseCaseFlow");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUseCaseFlow
entryRuleUseCaseFlow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCaseFlowRule()); }
	iv_ruleUseCaseFlow=ruleUseCaseFlow
	{ $current=$iv_ruleUseCaseFlow.current; }
	EOF;

// Rule UseCaseFlow
ruleUseCaseFlow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UseCaseFlow:'
		{
			newLeafNode(otherlv_0, grammarAccess.getUseCaseFlowAccess().getUseCaseFlowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseFlowAccess().getCompleteActionsBlockCompleteActionBlockParserRuleCall_1_0());
				}
				lv_completeActionsBlock_1_0=ruleCompleteActionBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseFlowRule());
					}
					add(
						$current,
						"completeActionsBlock",
						lv_completeActionsBlock_1_0,
						"mx.kukulkan.dsl.usecase.UseCase.CompleteActionBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCompleteActionBlock
entryRuleCompleteActionBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompleteActionBlockRule()); }
	iv_ruleCompleteActionBlock=ruleCompleteActionBlock
	{ $current=$iv_ruleCompleteActionBlock.current; }
	EOF;

// Rule CompleteActionBlock
ruleCompleteActionBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CompleteActionBlock:'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompleteActionBlockAccess().getCompleteActionBlockKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompleteActionBlockAccess().getUserActionsBlockUserActionBlockParserRuleCall_1_0());
				}
				lv_userActionsBlock_1_0=ruleUserActionBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompleteActionBlockRule());
					}
					add(
						$current,
						"userActionsBlock",
						lv_userActionsBlock_1_0,
						"mx.kukulkan.dsl.usecase.UseCase.UserActionBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCompleteActionBlockAccess().getSystemActionsBlockSystemActionBlockParserRuleCall_2_0());
				}
				lv_systemActionsBlock_2_0=ruleSystemActionBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompleteActionBlockRule());
					}
					add(
						$current,
						"systemActionsBlock",
						lv_systemActionsBlock_2_0,
						"mx.kukulkan.dsl.usecase.UseCase.SystemActionBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleUserActionBlock
entryRuleUserActionBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUserActionBlockRule()); }
	iv_ruleUserActionBlock=ruleUserActionBlock
	{ $current=$iv_ruleUserActionBlock.current.getText(); }
	EOF;

// Rule UserActionBlock
ruleUserActionBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='UserActionBlock'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUserActionBlockAccess().getUserActionBlockKeyword());
	}
;

// Entry rule entryRuleSystemActionBlock
entryRuleSystemActionBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemActionBlockRule()); }
	iv_ruleSystemActionBlock=ruleSystemActionBlock
	{ $current=$iv_ruleSystemActionBlock.current; }
	EOF;

// Rule SystemActionBlock
ruleSystemActionBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SystemActionBlock:'
		{
			newLeafNode(otherlv_0, grammarAccess.getSystemActionBlockAccess().getSystemActionBlockKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSystemActionBlockAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemActionBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getSystemActionBlockAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemActionBlockRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
