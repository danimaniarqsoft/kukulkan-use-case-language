/*
 * generated by Xtext 2.16.0
 */
package mx.kukulkan.dsl.usecase.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mx.kukulkan.dsl.usecase.ide.contentassist.antlr.internal.InternalUseCaseParser;
import mx.kukulkan.dsl.usecase.services.UseCaseGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class UseCaseParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UseCaseGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UseCaseGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRequirementsUseCaseModelAccess().getGroup(), "rule__RequirementsUseCaseModel__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getConceptAccess().getGroup(), "rule__Concept__Group__0");
			builder.put(grammarAccess.getUseCaseAccess().getGroup(), "rule__UseCase__Group__0");
			builder.put(grammarAccess.getUseCaseFlowAccess().getGroup(), "rule__UseCaseFlow__Group__0");
			builder.put(grammarAccess.getCompleteActionBlockAccess().getGroup(), "rule__CompleteActionBlock__Group__0");
			builder.put(grammarAccess.getSystemActionBlockAccess().getGroup(), "rule__SystemActionBlock__Group__0");
			builder.put(grammarAccess.getRequirementsUseCaseModelAccess().getActorsAssignment_0(), "rule__RequirementsUseCaseModel__ActorsAssignment_0");
			builder.put(grammarAccess.getRequirementsUseCaseModelAccess().getDataAssignment_1(), "rule__RequirementsUseCaseModel__DataAssignment_1");
			builder.put(grammarAccess.getRequirementsUseCaseModelAccess().getUsecasesAssignment_2(), "rule__RequirementsUseCaseModel__UsecasesAssignment_2");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getDescriptionAssignment_2(), "rule__Actor__DescriptionAssignment_2");
			builder.put(grammarAccess.getConceptAccess().getNameAssignment_1(), "rule__Concept__NameAssignment_1");
			builder.put(grammarAccess.getConceptAccess().getConceptDescriptionAssignment_2(), "rule__Concept__ConceptDescriptionAssignment_2");
			builder.put(grammarAccess.getUseCaseAccess().getNameAssignment_1(), "rule__UseCase__NameAssignment_1");
			builder.put(grammarAccess.getUseCaseAccess().getUseCaseNameAssignment_2(), "rule__UseCase__UseCaseNameAssignment_2");
			builder.put(grammarAccess.getUseCaseAccess().getActorsAssignment_3(), "rule__UseCase__ActorsAssignment_3");
			builder.put(grammarAccess.getUseCaseAccess().getConceptsAssignment_4(), "rule__UseCase__ConceptsAssignment_4");
			builder.put(grammarAccess.getUseCaseAccess().getUseCasesFlowAssignment_5(), "rule__UseCase__UseCasesFlowAssignment_5");
			builder.put(grammarAccess.getUseCaseFlowAccess().getCompleteActionsBlockAssignment_1(), "rule__UseCaseFlow__CompleteActionsBlockAssignment_1");
			builder.put(grammarAccess.getCompleteActionBlockAccess().getUserActionsBlockAssignment_1(), "rule__CompleteActionBlock__UserActionsBlockAssignment_1");
			builder.put(grammarAccess.getCompleteActionBlockAccess().getSystemActionsBlockAssignment_2(), "rule__CompleteActionBlock__SystemActionsBlockAssignment_2");
			builder.put(grammarAccess.getSystemActionBlockAccess().getNameAssignment_1(), "rule__SystemActionBlock__NameAssignment_1");
			builder.put(grammarAccess.getSystemActionBlockAccess().getDescriptionAssignment_2(), "rule__SystemActionBlock__DescriptionAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UseCaseGrammarAccess grammarAccess;

	@Override
	protected InternalUseCaseParser createParser() {
		InternalUseCaseParser result = new InternalUseCaseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UseCaseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UseCaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
