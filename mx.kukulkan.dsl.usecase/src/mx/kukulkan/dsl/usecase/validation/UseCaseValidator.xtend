/*
 * generated by Xtext 2.16.0
 */
package mx.kukulkan.dsl.usecase.validation

import org.eclipse.xtext.validation.Check
import mx.kukulkan.dsl.usecase.useCase.UseCasePackage
import org.eclipse.xtext.xtext.generator.ui.quickfix.QuickfixProviderFragment2
import mx.kukulkan.dsl.usecase.useCase.UseCase
import mx.kukulkan.dsl.usecase.useCase.RequirementsUseCaseModel

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class UseCaseValidator extends AbstractUseCaseValidator {

//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					UseCasePackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	@Check
	def void checkNameStartsWithCapital(UseCase useCase) {
		if (!Character.isUpperCase(useCase.name.charAt(0))) {
			warning("Name should start with a capital", UseCasePackage.Literals.USE_CASE__NAME)
		}
	}

	@Check
	def void checkUniqueEntityName(UseCase useCase) {
		val model = useCase.eContainer as RequirementsUseCaseModel
		for (extEntity : model.usecases) {
			if (extEntity.name.equals(useCase.name) && extEntity != useCase) {
				error('Duplicated Use Case name', UseCasePackage.Literals.USE_CASE__NAME, 'duplicatedUseCase')
			}
		}
	}
}
